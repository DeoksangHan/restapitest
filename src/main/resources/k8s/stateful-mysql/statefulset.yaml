apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-sts
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql-svc
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:5.7.34
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Generate mysql server-id from pod ordinal index.
              # => 파드 서수 인덱스에서 mysql server-id를 생성합니다.
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo [mysqld] > /mnt/conf.d/server-id.cnf
              # Add an offset to avoid reserved server-id=0 value.
              # => 예약된 server-id=0 값을 피하기 위해 오프셋을 추가한다.
              echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
              # Copy appropriate conf.d files from config-map to emptyDir.
              # => config-map에서 emptyDir로 conf.d 파일을 복사한다.
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/config-map/master.cnf /mnt/conf.d/
              else
                cp /mnt/config-map/slave.cnf /mnt/conf.d/
              fi
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: config-map
              mountPath: /mnt/config-map
        - name: clone-mysql
          image: gcr.io/google-samples/xtrabackup:1.0
          command:
            - bash
            - "-c"
            - |
              set -ex

              # Skip the clone if data already exists.
              # => 데이터가 이미 있는 경우 복제를 건너뜁니다.
              [[ -d /var/lib/mysql/mysql ]] && exit 0

              # Skip the clone on primary (ordinal index 0).
              # => 서수 인덱스 0에서 복제 건너뛰기.
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              [[ $ordinal -eq 0 ]] && exit 0

              # Clone data from previous peer.
              # => 이전 피어에서 데이터를 복제합니다.
              ncat --recv-only mysql-sts-$(($ordinal-1)).mysql-svc 3307 | xbstream -x -C /var/lib/mysql

              # Prepare the backup.
              # => 백업을 준비합니다.
              xtrabackup --prepare --target-dir=/var/lib/mysql
          volumeMounts:
            - name: test
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
      containers:
        - name: mysql
          image: mysql:5.7.34
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: test
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
            - name: mysql-initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: time-zone
              mountPath: /etc/localtime
          env:
            # - name: MYSQL_ALLOW_EMPTY_PASSWORD
            #   value: "1"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef: # Get data from Secret
                  name: mysql-secret # Secret metaData name = mysql-secret
                  key: root-password # Secret data key = root-password
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          livenessProbe:
            exec:
              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              #command: ["mysql", "-h", "127.0.0.1", "-u$MYSQL_USER", "-p$MYSQL_PASSWORD", "-e", "SELECT 1"]
              command:
                - bash
                - -c
                - mysql -h 127.0.0.1 -u$MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1"
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
        - name: xtrabackup
          image: gcr.io/google-samples/xtrabackup:1.0
          ports:
            - name: xtrabackup
              containerPort: 3307
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef: # Get data from Secret
                  name: mysql-secret # Secret metaData name = mysql-secret
                  key: root-password # Secret data key = root-password
          command:
            - bash
            - "-c"
            - |
              set -ex
              cd /var/lib/mysql
              echo "current location : /var/lib/mysql"

              # Determine binlog position of cloned data, if any.
              # 복제된 데이터의 binlog 위치를 확인합니다(있는 경우).
              if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
                # XtraBackup already generated a partial "CHANGE MASTER TO" query
                # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
                # => XtraBackup은 이미 부분적인 "CHANGE MASTER TO" 쿼리를 생성했습니다.
                # => 기존 복제본에서 복제 중이기 때문입니다. (꼬리 세미콜론을 제거해야합니다!)
                echo "shell cat xtrabackup_slave_info sed change_master_to"
                cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in

                # Ignore xtrabackup_binlog_info in this case (it's useless).
                # => 이 경우 xtrabackup_binlog_info를 무시합니다(쓸모 없음).
                echo "shell rm xtrabackup_slave_info xtrabackup_binlog_info"
                rm -f xtrabackup_slave_info xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
                # We're cloning directly from primary. Parse binlog position.
                # => primary에서 직접 복제하고 있습니다. binlog 위치를 구문 분석합니다.
                [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                echo "shell rm xtrabackup_binlog_info xtrabackup_slave_info"
                rm -f xtrabackup_binlog_info xtrabackup_slave_info
                echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                      MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
              fi

              # Check if we need to complete a clone by starting replication.
              # => 복제를 시작하여 복제를 완료해야 하는지 확인합니다.
              if [[ -f change_master_to.sql.in ]]; then
                # => echo mysqld가 준비될 때까지 기다리기(연결 수락)
                echo "Waiting for mysqld to be ready (accepting connections)"
                until mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do sleep 1; done

                # => echo 클론 위치에서 복제 초기화
                echo "Initializing replication from clone position"
                mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} \
                      -e "$(<change_master_to.sql.in), \
                              MASTER_HOST='mysql-sts-0.mysql', \
                              MASTER_USER='root', \
                              MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}', \
                              MASTER_CONNECT_RETRY=10; \
                            START SLAVE;" || exit 1

                # In case of container restart, attempt this at-most-once.
                # => 컨테이너 재시작의 경우, 최대 한 번만 시도하십시오.
                mv change_master_to.sql.in change_master_to.sql.orig
              fi

              # Start a server to send backups when requested by peers.
              # => 서버를 시작하여 피어가 요청할 때 백업을 보냅니다.
              exec ncat --listen --keep-open --send-only --max-conns=2 3307 -c \
                "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=${MYSQL_ROOT_PASSWORD}"

              # --backup : Make a backup and place it in xtrabackup `--target-dir`. ---> line 61
              # --slave-info : pints the binary log position of the master server. also writes this information to the xtrabackup_slave_info file as a CHANGE MASTER command.
              # --stream : Stream all backup files to the standard output in the specified format
              # --user : This option specifies the MySQL username used when connecting to the server.
              # --password : This option specifies the password to use when connecting to the database.
          volumeMounts:
            - name: test
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
            - name: time-zone
              mountPath: /etc/localtime
      volumes:
        - name: conf
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql-config
        - name: mysql-initdb
          configMap:
            name: mysql-config
        - name: time-zone
          hostPath:
            path: /usr/share/zoneinfo/Asia/Seoul
  volumeClaimTemplates:
    - metadata:
        name: test
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
